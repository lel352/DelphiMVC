unit uSistemaControl;

interface

uses uConexao, System.SysUtils, uEmpresaModel;

type
  TSistemaControl = Class

  private
    FConexao: TConexao;
    FEmpresa: TEmpresaModel;
    FCodigoEmpresa: Integer;

    class var FInstance: TSistemaControl;
  public
    constructor create;
    destructor destroy; override;

    procedure setEmpresa(codigoEmpresa: TEmpresaModel);
    procedure carregaEmpresa;

    class function getIntance: TSistemaControl;

    property conexao: TConexao read FConexao write FConexao;
    property empresa: TEmpresaModel read FEmpresa write FEmpresa;


  end;


implementation

{ TSistemaControl }

procedure TSistemaControl.carregaEmpresa;
begin
  FEmpresa.carregar();
end;

constructor TSistemaControl.create;
begin
  FConexao := TConexao.create;
  FEmpresa := TEmpresaModel.create;
end;

destructor TSistemaControl.destroy;
begin
  FreeAndNil(FEmpresa);
  FreeAndNil(FConexao);

  inherited;
end;

class function TSistemaControl.getIntance: TSistemaControl;
begin
   if not Assigned(Self.FInstance) then begin
      Self.FInstance := TSistemaControl.Create;
   end;

   result := Self.FInstance;
end;

procedure TSistemaControl.setEmpresa(codigoEmpresa: Integer);
begin
end;

end.
